Java :

1996 

Features of Java : 

1) Simple 

+  - * / %

2 + 5 = 7

2 + 5 = 32

2) OO (Object oriented )
Object
Class
i) Encapsulation
ii) POlymorphism
iii) Inheritence
iv) Abstraction

3) Robust 
4) Secure 
5) Platform Indepenedent 
paltform means OS 
6) Architectural Neutral 

Architecture means Microprocessor and RAM 

7) Portable 
 
Portable means Architecture 


WORA Write Once Run Anywhere

---------------------------------------------------------
jdk installation :

Java 22  is latest 

java 11 is the most popular and stable 

????????????????????????????????????????????????????????
Assignment -1 

download jdk 11 and take screenshot of below location 

C:\Program Files\Java\jdk-11

and send screenshot to below email id

riyazsirnotes@gmail.com

????????????????????????????????????????????????????????? 


Configuration of java or jdk 

C:\Users\Riyaz>java -version
java version "11.0.24" 2024-07-16 LTS
Java(TM) SE Runtime Environment 18.9 (build 11.0.24+7-LTS-271)
Java HotSpot(TM) 64-Bit Server VM 18.9 (build 11.0.24+7-LTS-271, mixed mode)

????????????????????????????????????????????????????????
Assignment -2 

configure java using 

JAVA_HOME  

path variables  and open command prompt give below command

java -verison

and send screenshot to below email id

riyazsirnotes@gmail.com

?????????????????????????????????????????????????????????????

								jdk folders
								
								
								
			lib						bin/tools				jre/jmods 


Lib : Library is a set of predefined stuff or pgrams used for app development		

	
								
							lib (API)
							 |
							jars  (~ Zip folders)
							  |
							packages (~ folders)
							   |
			    ---------------------------------------
			    |									   |
		Classes										Interfaces
		    |
	-----------------						-------------------------
	|				 |					    |                        |
	Variables		Methods				Constants/Fields			 Abstract MEthods
								
								
bin/tools :

these are application or commands to maintain the programs 		

javac 		-> to compile a java program				
	
syntax :

javac ClassName.java 


java   -> to run java program 

syntax :

java ClassName

--------------------------------------
jre (Java Runtime Environment)

							jvm (java virtual machine)
							 |
		    ------------------------------------------
			|					|					   |
			CLSS               EE 					  GC 
								|
							--------------
							|			  |
						Interpreter		JIT 
										compile 

CLSS - Class Loader Subsystem 
- Loading
- Linking
- Initialization

EE - Execution Engine 
	
Interpreter --> BC to machine understandable code 
JIT compiler --> Just in time compiler 

GC : Garbage collector 

Mark  - will identify the objects/varibale etc to be deallocated

Sweep  - will do deallocation of per MArk request 

--------------------------------------------------------------
Structure of JAVA Program
---------------------------------------------------------------	
1. Documentation Section
2. Package Section
3. Import Section
4. Class or Interface Section

						
1. Documentation Section 

comments 

single line comment // 

multi line comments

/* ljklkjkl
kjhkjhjkhjk
kjhkjhjkhh 
*/

2. package section

package means similar to folders

syntax

package packagename;

3. import section


import package.*; ==> not prefered

import java.util.*;

import packagename.ClassName; ==> most prefered (Readability)

4. Class/Interface 

syntax : 

access-specifier access-modifier class ClassName
{

//variables

//methods 


}

or

access-specifier access-modifier interface InterfaceName
{

//Constants/Fields

//Abstract Methods  


}

access-specifier : access label 

public / private / protected / <default> or <unspecicifed>


access-modifier :

static / abstract / transient / volatile / <default> or <unspecicifed>



-------------------------------------------------------------
Naming Conventions in Java 
--------------------------------------------------------------
							
						packages (~ folders)
							   |
			    ---------------------------------------
			    |									   |
		Classes										Interfaces
		    |
	-----------------						-------------------------
	|				 |					    |                        |
	Variables		Methods				Constants/Fields			 Abstract MEthods
								
															
															
packages : all lower case 

java.util

org.openqa.selenium

regression 


Classes / Interfaces : Title case 

Scanner

ChromeDriver 

ValidateLogin 

															
Variables / methods / abstract methods :  LowerCase + UpperCase = CamelCase 

						
						
int x 

double netSalary 

costOfItem

						
main(

nextInt(

println(

Constants/Fields : All Upper case

PI = 3.14

MAX_LIMIT=10000				

-----------------------------------------------------
JAVA MEMORY BLOCKS
-----------------------------------------------------

4 Blocks :


1. Class Area / Method Area 

static variables , static methods , static blocks , .class files etc ..

2. Heap Area (Dynamic Memory Allocation Area)

Objects , Arrays etc ..

3. Java Stack Area (JSA)

local variables , expressions , current running logic 

int x=10;

int y=20

s.o.p(x+y);							


4. String Constant Pool Area (SCPA)

only for String literal 

String s="LiveTech";

-------------------------------------------------------------
Variables in Java 
-------------------------------------------------------------

						variables
						
						
		local				instance 			static 

syntax :

access-specifier access-modifier datatype varibaleName = value; 
		
						
access-specifier access-modifier datatype varibaleName; declaration

varibaleName = value; assignment or initialization 
					

5 points to be remembered 

1. definition 
2. where memory is getting allocated
3. when memory allocated 
4. what is calling style
5. Scope or life time 
		
						
Local Variables :


1. definition 

variables which are declared inside a method 

2. where memory is getting allocated

Java Stack Area 

3. when memory allocated 

when  the method is called 

4. what is calling style

varibaleName itself

5. Scope or life time 

till the end of method 

Note :

local variables should be initilized ,
it's programmer or developer responsibilty to initilize with some value .


VariablesDemo1.java:13: error: variable b might not have been initialized
System.out.println(b);
                   ^
1 error

-------------------------------------------------
instance  variables


1. definition 

variables which are declared inside a class but outside of method 

2. where memory is getting allocated

Heap Area 

3. when memory allocated 

when an object or instance of that class is created 

4. what is calling style

objectName.varibaleName

5.  Scope or life time 

till the last usage of the object 

--------------------------------------------------------------------
Static Variables

1. definition 

variables which are declared inside a class but outside of method and having keyword static 

2. where memory is getting allocated

Class Area / Method Area 

3. when memory allocated 

during .class file loading 

4. what is calling style

ClassName.varibaleName

5. Scope or life time 

till the end of program

Note : 

when should we declare variable as static ?

when we have some data/value that is common and shared across 


--------------------------------------------------
IDE - Integrated Development Environment

Eclipse / IntelliJ Idea / VS code / Net beans 

how to download eclipse ?

https://www.eclipse.org/downloads/

click on Download Packages link 
-> under "MORE DOWNLOADS"

click on "Eclipse 2023-09 (4.29)"

--> Eclipse IDE for Enterprise Java and Web Developers 
click on Windows x86_64	

????????????????????????????????????????????????????????
Assignment -3

complete the eclipse download and create a workspace 

and send screenshot to below email id

riyazsirnotes@gmail.com

?????????????????????????????????????????????????????????????

------------------------------------------------------
Data Types in Java 
------------------------------------------------------

								Data Types
						
						
						primitive (8)				non-primitive 
						
						
	byte b=10;

byte b=128;
Type mismatch: cannot convert from int to byte
short s=32768;
Type mismatch: cannot convert from int to byte
int x=2147483648;
The literal 2147483648 of type int is out of range 

	
--------------------------------------------------------
methods in Java 
-------------------------------------------------------

								Methods 
								
								
				non-static						Static 	



								Methods 
								
								
				predefined						user-defined  					
				
Method :

Set of instructions 

to perform some particular 

Advanatages :

- reusabilty
- code clarity
- avoids code redundancy
- length of the code decreases
- easy debugging of programs 


method syntax :

access-specifier access-modifier return-type methodName(arguments/parameters)
{
// statements 


}

------------------------------------
non-static	methods :
-------------------------------------
5 points to be remembered 

1. definition

a method declared with out static keyword is nothing non-static method.

<default> , abstract ,  transient , volatile etc ..


2. where memory is getting allocated

HEap Area along with objects

3. when memory allocated 

when you create an object 

4. what is calling style

objectName.methodName();

5. Scope or life time 

till the last usage of object 


4 Models 


methods without return-type and without parameters

methods without return-type and with parameters

methods with return-type and without parameters

methods with return-type and with parameters


------------------------------------
static	methods :
-------------------------------------
5 points to be remembered 

1. definition

a method declared with  static keyword is nothing but static method.

2. where memory is getting allocated

Class Area / Method Area 

3. when memory allocated 

during .class file loading 

4. what is calling style


ClassName.methodName();

5. Scope or life time 

till the end of program 


????????????????????????????????????????????????????????
Assignment -4 

use the reference from jul26th package and create 4 more classes 
to calculate sum of n natural  numbers using below styles or models

methods without return-type and without parameters

methods without return-type and with parameters

methods with return-type and without parameters

methods with return-type and with parameters

and send screenshot to below email id

riyazsirnotes@gmail.com

?????????????????????????????????????????????????????????????

??????????????????????????????????????????????????????
Assignment - 5 


write a program with 4 methods (4 styles) 
to calculate Simple Interest 

hint SI = P*T*R /100;

????????????????????????????????????????????????????????

--------------------------------------------------------------
OOPs Object Oriented Programming 

a methodology used for development and maintainance of applications or programs .

Object
Class
Encapsulation
Polymorphism
Inheritence
Abstraction


Object : 

def: 

Object is anything that exists .
or
Instance of class 

e.g Marker , fan , man , dog , bank account number etc ..

3 Characteristics :

State : data or attributes that represent an object (nothing but variables)

for Marker : length 12 cm , shape = cyclindral , color=white

for bankaccount : no of character or digits =13 


Behaviour : actions or tasks that can be performed by an objects ( ntohing but methods )

for Dog : eating , barking etc..

for bankaccount : fund tranfers 


Identity : is a unique id given by JVM to keep track of objects 

---------------------------------------------------------------------------------

Class : 

class is blueprint or template from which yuo create an object.

e.g 

Animals 


access-specifier access-modifier class ClassName
{


//variables

//methods 


}

*********************************************
Object creation techniques
*********************************************

1) using new operator 

ClassName objectName=new ClassName();

2) using static factory method 

ClassName objectN=ClassName.methodName();

3) using non-static factory method 

ClassName1 object1=new ClassName1();

ClassName2 object2=object1.method();

4) using clone method 



5) using literals 

ClassName objectName=value;

String str="LiveTech";

Integer i=10;

6) using deserialization 

no syntax used by JVM 


-----------------------------------------------
Encapsulation
-----------------------------------------------

Encapsulation in Java is a process of wrapping code and data together into a single unit,
 for example, a capsule which is mixed of several medicines.
 
 
 Encapsulation in Java is a mechanism of 
 wrapping the data (variables) and code acting on the data (methods) together as a single unit.
 
 
	Encapsulation =	Data hiding  + Abstraction
	
	
	The field Bank.balance is not visible
	
	
PrintStream  : 4 methods 


print(    ==> this will print and cursor stays in same line 

* * * * * 
* * * *
* * *
* *
*

println(  ==> this will print and cursor moves to new line 

printf(  ==> to do some formating to the output but cursor stays in same line  

format(	 ==>  to do some formating to the output but cursor stays in same line  

*****************************************************
Polymorphism
******************************************************

poly means many 

morph means forms 

The method add(int, int) in the type Sum is not applicable for the arguments (double, double)

The method add(int, int) in the type Sum is not applicable for the arguments (long, long)

The method add(int, int) in the type Sum is not applicable for the arguments (int, int, int)


										Polymorphism
										
										
					Static									Dynamic
					  or
					Compile time							Runtime 
					  or 
					Early Binding							Late Binding
					
					
					
					
									Compile time Polymorphism
									
									
						Operator  Overloading 						Method Overloading
							(java doesn't support)
									
										
										
	==> Runtime polymorphism can be achived by Method over riding (this will be discussed after inheritance topic)
	
	
terminology :

method signature : methodName + arguments/parameters	
	
Method Overloading :

In Same class 
- same method name with chnage in data types 
- same method name with change in no of arguments/parameters

??????????????????????????????????????????????????????
Assignment - 6


write a program using method overloading to 
generate aadhar card 

inputs can be String voterId or passportNo or panCard

hint to genrate 4 digit number 

System.out.println((int)(Math.random()*10000));

????????????????????????????????????????????????????????

0.0056123457987897

0056


*************************************
Constructors :
*************************************

Constructor is a method in class having same as ClassName 

rules :

1) constructor should be same as ClassName(Case Sensitive) 
2) constructors doesn't have return-type
Q: what happens if we declare a return-type
Ans : that method will be no more a constructor 
instead it will be retreated as normal or conrete method

3) No access-modifier 

Q: what happens if we declare a access-modifier

Ans: compilation error

Illegal modifier for the constructor in type Clock; only public, protected & private are permitted

									Constructors
									
									
				default								parameterized constructors
				  or
				non-parameterized
				
				
************************************
Inheritence
*************************************
Inheritance in Java is a mechanism in which one object 
acquires all the properties and behaviors of a parent object.		

Method Overriding :



*******************************
Abstraction 
*******************************

									Abstraction
									
									
									
				Abstract Class							Interfaces
				( 0 to 100 %) 							100 % 
									
				
Abstract Class : 


Abstract method 

access-specifier abstract return-type methodName(arguments);

Cannot instantiate the type Numbers				
									

***************************************
Interfaces
***************************************	


Fields :

access-specifier static final datatype ConstantName = value;

public static final double PI = 3.14;

Abstract methods :

access-specifier abstract return-type methodName(arguments);

Interface Syntax :

access-specifier modifier interface InterfaceName
{

//constants 
//abstract methods 


}

										
*******************************************************************
Season 2 - Java 
******************************************************************
Arrays : 

int x=10;
int y=20;
String s="Livetech"

Array is a indexed collection of homogenous data types elements having fixed length 


Arrays declaration 

access-specifier modifier datatype[] arrayName;  //declaration

arrayName= { value1,value2 ...valuen}; //initialization  or assignment

int[] a;
a={10,20,30,40,50,61,75,85,91,100};

how to retrieve items or elements in an array ?

using index 

for e.g if i want to retrive 61 

then a[5] here 5 is the index 
										
										
										Second way of array initialization :
										
	using new operator 
	
datatype[] arrayName=new datatype[length];

int[] a=new int[10];


Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException: Index 10 out of bounds for length 10
	at aug13th.ArraysDemo2.main(ArraysDemo2.java:26)
	
										
Disadvantages of aarrays :

1. Arrays doen't have growable nature 

2. Arrays doesn't store hetrogenous or dismilar data types 

3. Arrays doesn't have predefined methods or algorithms 										
										

*************************************
Collections in java 
*************************************
It's an API or framework 

									Iterable (I)
									   |
									Collection(I)
									   |
				List(I)				Queue(I)			Set(I)
			- ArrayList(c)							 - HashSet(c)	
			- LinkedList(c)							 - LinkedHashSet(C)
			- Vector								 - SortedSet(I)
			- Stack 								 - TreeSet(c)
			
findElements(By):List<WebElement>

getWindowHandles():Set<String> 		

a[0]=10;

s[0]=new Student();

----------------------------------
Methods in Collection (I) 
----------------------------------
java.util 

iterator():Iterator<T> 

add(E):boolean 

addAll(Collection<? extends E>):boolean 

size():int 

contains(Object):boolean 

isEmpty():boolean

remove(Object):boolean

--------------------------------------
ArrayList(C)
--------------------------------------

is also called as Indexed collection or Ordered collections 

ArrayList()
ArrayList(int)
ArrayList(Collection<? extends E>)


add(int, E):void 

get(int):E 

List al=new ArrayList();


---------------------------------
HashSet(C)
---------------------------------

is unordered collection 

HashSet()
HashSet(int)
HashSet(int, float)
HashSet(int, float, boolean)
HashSet(Collection<? extends E>)

new HashSet();







 












	
				
									
									
									
							
									